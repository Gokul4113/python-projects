import requests
import json
import sqlite3
import time

# GitHub API URL to fetch CVE file list (2024 CVEs)
GITHUB_API_URL = "https://api.github.com/repos/CVEProject/cvelistV5/contents/cves/2024"

# Step 1: Fetch CVE List from GitHub
def get_cve_list():
    response = requests.get(GITHUB_API_URL)
    
    if response.status_code == 200:
        return response.json()  # Returns list of CVE file metadata
    else:
        print("❌ Failed to fetch CVE list:", response.status_code)
        return []

# Step 2: Fetch Details for Each CVE
def get_cve_details(cve_filename):
    cve_url = f"https://raw.githubusercontent.com/CVEProject/cvelistV5/main/cves/2024/{cve_filename}"
    response = requests.get(cve_url)
    
    if response.status_code == 200:
        return json.loads(response.text)  # Load JSON data
    return None

# Step 3: Filter CVEs with CWE and CVSS
def filter_cves(cve_list):
    filtered_data = []
    
    for cve_file in cve_list:
        cve_id = cve_file['name'].replace('.json', '')  # Extract CVE ID
        cve_data = get_cve_details(cve_file['name'])
        
        # Introduce a short delay to avoid GitHub API rate limits
        time.sleep(1)
        
        if cve_data and 'containers' in cve_data:
            cve_info = cve_data['containers'].get('cna', {})
            
            # Extract CWE
            cwe_id = "N/A"
            if 'cwe' in cve_info and isinstance(cve_info['cwe'], list) and len(cve_info['cwe']) > 0:
                cwe_id = cve_info['cwe'][0].get('id', "N/A")
            
            # Extract CVSS Score (Checking multiple possible keys)
            cvss_score = None
            if 'metrics' in cve_info:
                for metric in cve_info['metrics']:
                    if 'cvssV3_1' in metric:
                        cvss_score = metric['cvssV3_1'].get('baseScore', None)
                    elif 'cvssV3' in metric:
                        cvss_score = metric['cvssV3'].get('baseScore', None)
            
            if cvss_score is not None:
                filtered_data.append({
                    "CVE": cve_id,
                    "CWE": cwe_id,
                    "CVSS": float(cvss_score)  # Convert to float for proper DB storage
                })
    
    return filtered_data

# Step 4: Store Data in SQLite Database
def store_data_in_db(data):
    conn = sqlite3.connect('C:\Users\gokul\Downloads\pyhton\cve_data.db')
    cursor = conn.cursor()
    
    # Use REAL (FLOAT) for CVSS scores
    cursor.execute('''CREATE TABLE IF NOT EXISTS CVEs (id TEXT, cwe TEXT, cvss REAL)''')

    for entry in data:
        cursor.execute("INSERT INTO CVEs VALUES (?, ?, ?)", (entry['CVE'], entry['CWE'], entry['CVSS']))
    
    conn.commit()
    conn.close()
    print("✅ Data stored successfully in database!")

# Step 5: Generate Key Cybersecurity Metrics
def generate_metrics():
    conn = sqlite3.connect('cve_data.db')
    cursor = conn.cursor()

    # Total CVEs
    cursor.execute("SELECT COUNT(*) FROM CVEs")
    total_cves = cursor.fetchone()[0]

    # High-Risk CVEs (CVSS ≥ 7.0)
    cursor.execute("SELECT COUNT(*) FROM CVEs WHERE cvss >= 7.0")
    high_risk_cves = cursor.fetchone()[0]

    # Most Common CWE Categories
    cursor.execute("SELECT cwe, COUNT(*) FROM CVEs WHERE cwe != 'N/A' GROUP BY cwe ORDER BY COUNT(*) DESC LIMIT 5")
    common_cwes = cursor.fetchall()

    # Average CVSS Score
    cursor.execute("SELECT AVG(cvss) FROM CVEs")
    avg_cvss = cursor.fetchone()[0]

    print("\n📊 **Cybersecurity Metrics:**")
    print(f"🔹 Total CVEs: {total_cves}")
    print(f"⚠️ High-Risk CVEs (CVSS ≥ 7.0): {high_risk_cves}")
    print(f"📈 Average CVSS Score: {avg_cvss:.2f}")
    
    print("🔍 Most Common CWE Types:")
    for cwe, count in common_cwes:
        print(f"   - {cwe}: {count} occurrences")

    conn.close()

# Run the whole process
print("🔄 Fetching CVE List...")
cve_list = get_cve_list()
print(f"✅ Retrieved {len(cve_list)} CVE entries.")

print("🔍 Filtering CVEs with CWE and CVSS...")
filtered_cves = filter_cves(cve_list)
print(f"✅ Found {len(filtered_cves)} CVEs with CWE and CVSS data.")

print("💾 Storing Data in Database...")
store_data_in_db(filtered_cves)

print("📊 Generating Cybersecurity Metrics...")
generate_metrics()
